In some compiler, the order in which evaluation of expressions separated by
insertion operators is right associative which means that last expression after 
the last insertion operator is evaluated first and then previous ones are evaluated. 
Then they are  concatenated together and sent to screen to print. 

Queue has a, b, c. 
cout<< q.del()<<q.del()<<q.del;
Expected: abc    Actual Result: cba

In some compilers, the third q.del() happens first which returns 'a'. Then second q.del() is evaluated 
which returns 'b'. Likewise third evaluates to 'c'. Now before they are sent to console, they are 
concatenated together in order they were declared. Therefore yielding 'cba' instead of expected 
'abc'. 
In order to get the expected output, we will need to write our code as:

char a,b,c;
char a=q.del();
char b=q.del();
char c=q.del();
cout<<a<<b<<c;

This code will always give us the expected result no matter which compiler we are using. 